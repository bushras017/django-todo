name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ZONE: us-central1-a

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Auth to GCP
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Extract Service Account Email
      id: sa-email
      run: |
        SA_EMAIL=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')
        echo "SA_EMAIL=$SA_EMAIL" >> $GITHUB_ENV

    # Add Storage Admin role for function deployment
    - name: Setup Additional IAM Permissions
      run: |
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${{ env.SA_EMAIL }}" \
          --role="roles/storage.admin"

        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${{ env.SA_EMAIL }}" \
          --role="roles/bigquery.dataEditor"
        
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${{ env.SA_EMAIL }}" \
          --role="roles/logging.configWriter"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Create terraform.tfvars
      run: |
        cat > terraform/terraform.tfvars << EOF
        project_id = "${{ secrets.GCP_PROJECT_ID }}"
        region = "${{ env.REGION }}"
        zone = "${{ env.ZONE }}"
        db_password = "${{ secrets.DB_PASSWORD }}"
        notification_email = "${{ secrets.NOTIFICATION_EMAIL }}"
        notification_email_password = "${{ secrets.EMAIL_APP_PASSWORD }}"
        alert_email_recipients = ${{ secrets.ALERT_EMAILS }}
        service_account_email = "${{ env.SA_EMAIL }}"
        EOF

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    # Import all existing resources
    - name: Import Existing Resources
      working-directory: ./terraform
      run: |
        # Network resources
        terraform import google_compute_network.vpc \
          "projects/${{ secrets.GCP_PROJECT_ID }}/global/networks/devsecops-vpc" || true
        
        terraform import google_compute_subnetwork.subnet \
          "projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ env.REGION }}/subnetworks/devsecops-subnet" || true
        
        # Firewall rules
        terraform import google_compute_firewall.allow_monitoring \
          "projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-monitoring" || true
        
        terraform import google_compute_firewall.allow_django \
          "projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-django" || true
        
        terraform import google_compute_firewall.allow_internal \
          "projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-internal" || true
        
        terraform import google_compute_firewall.blocked_ips \
          "projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/blocked-ips" || true
        
        # BigQuery Dataset
        terraform import google_bigquery_dataset.security_logs \
          "${{ secrets.GCP_PROJECT_ID }}:security_logs" || true
        
        # Pub/Sub Topic
        terraform import google_pubsub_topic.prometheus_alerts \
          "projects/${{ secrets.GCP_PROJECT_ID }}/topics/prometheus-alerts" || true
        
        # Storage Bucket
        terraform import google_storage_bucket.function_bucket \
          "${{ secrets.GCP_PROJECT_ID }}-functions" || true

    - name: Prepare Cloud Function
      run: |
        if [ -d "cloud_function" ]; then
          cd cloud_function
          zip -r ../terraform/function.zip ./*
        else
          echo "Cloud function directory not found. Creating empty function.zip"
          touch empty.txt
          zip terraform/function.zip empty.txt
          rm empty.txt
        fi

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        # Try regular apply first
        if ! terraform apply -auto-approve; then
          # If apply fails, try with refresh-only first
          terraform apply -refresh-only -auto-approve
          # Then try regular apply again
          terraform apply -auto-approve
        fi

    - name: Deploy Django App
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Get outputs
        WEB_IP=$(terraform -chdir=terraform output -raw web_server_public_ip)
        DB_IP=$(terraform -chdir=terraform output -raw db_server_private_ip)
        
        # Create Django environment file
        cat > django_app/.env << EOF
        DEBUG=False
        DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=$DB_IP
        DB_PORT=5432
        ALLOWED_HOSTS=$WEB_IP,localhost,127.0.0.1
        GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }}
        EOF

        # Copy Django app to web server
        gcloud compute scp --recurse django_app/* web-server:/opt/django-app/
        gcloud compute scp django_app/.env web-server:/opt/django-app/

        # Setup and start Django
        gcloud compute ssh web-server --command "
          cd /opt/django-app && \
          python3 -m venv venv && \
          source venv/bin/activate && \
          pip install -r requirements.txt && \
          python manage.py migrate && \
          python manage.py collectstatic --noinup && \
          pkill -f runserver || true && \
          nohup python manage.py runserver 0.0.0.0:8000 > /var/log/django.log 2>&1 &"